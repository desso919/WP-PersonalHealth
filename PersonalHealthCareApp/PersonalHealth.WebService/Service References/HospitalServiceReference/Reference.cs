//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace PersonalHealth.WebService.HospitalServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HospitalServiceReference.IHospitalService")]
    public interface IHospitalService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetPatient", ReplyAction="http://tempuri.org/IHospitalService/GetPatientResponse")]
        System.IAsyncResult BeginGetPatient(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetPatientByUsernameAndPassword", ReplyAction="http://tempuri.org/IHospitalService/GetPatientByUsernameAndPasswordResponse")]
        System.IAsyncResult BeginGetPatientByUsernameAndPassword(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndGetPatientByUsernameAndPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetPatientByEGNAndPassword", ReplyAction="http://tempuri.org/IHospitalService/GetPatientByEGNAndPasswordResponse")]
        System.IAsyncResult BeginGetPatientByEGNAndPassword(string egn, string password, System.AsyncCallback callback, object asyncState);
        
        string EndGetPatientByEGNAndPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/AddNewPatient", ReplyAction="http://tempuri.org/IHospitalService/AddNewPatientResponse")]
        System.IAsyncResult BeginAddNewPatient(string username, string password, string first_name, string second_name, string last_name, string egn, string gender, int age, string birth_date, System.AsyncCallback callback, object asyncState);
        
        bool EndAddNewPatient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetHospital", ReplyAction="http://tempuri.org/IHospitalService/GetHospitalResponse")]
        System.IAsyncResult BeginGetHospital(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetHospital(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetAllHospitals", ReplyAction="http://tempuri.org/IHospitalService/GetAllHospitalsResponse")]
        System.IAsyncResult BeginGetAllHospitals(System.AsyncCallback callback, object asyncState);
        
        string EndGetAllHospitals(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetDoctor", ReplyAction="http://tempuri.org/IHospitalService/GetDoctorResponse")]
        System.IAsyncResult BeginGetDoctor(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetDoctor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetDoctorsByHospitalId", ReplyAction="http://tempuri.org/IHospitalService/GetDoctorsByHospitalIdResponse")]
        System.IAsyncResult BeginGetDoctorsByHospitalId(long hospital_id, System.AsyncCallback callback, object asyncState);
        
        string EndGetDoctorsByHospitalId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetAllDoctors", ReplyAction="http://tempuri.org/IHospitalService/GetAllDoctorsResponse")]
        System.IAsyncResult BeginGetAllDoctors(System.AsyncCallback callback, object asyncState);
        
        string EndGetAllDoctors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetPatientAllergies", ReplyAction="http://tempuri.org/IHospitalService/GetPatientAllergiesResponse")]
        System.IAsyncResult BeginGetPatientAllergies(long patient_id, System.AsyncCallback callback, object asyncState);
        
        string EndGetPatientAllergies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetAllAllergies", ReplyAction="http://tempuri.org/IHospitalService/GetAllAllergiesResponse")]
        System.IAsyncResult BeginGetAllAllergies(System.AsyncCallback callback, object asyncState);
        
        string EndGetAllAllergies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetHospitalRecord", ReplyAction="http://tempuri.org/IHospitalService/GetHospitalRecordResponse")]
        System.IAsyncResult BeginGetHospitalRecord(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetHospitalRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetHospitalRecordByPatientID", ReplyAction="http://tempuri.org/IHospitalService/GetHospitalRecordByPatientIDResponse")]
        System.IAsyncResult BeginGetHospitalRecordByPatientID(long patient_id, System.AsyncCallback callback, object asyncState);
        
        string EndGetHospitalRecordByPatientID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/AddNewHospitalRecord", ReplyAction="http://tempuri.org/IHospitalService/AddNewHospitalRecordResponse")]
        System.IAsyncResult BeginAddNewHospitalRecord(long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description, System.AsyncCallback callback, object asyncState);
        
        bool EndAddNewHospitalRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetVisitation", ReplyAction="http://tempuri.org/IHospitalService/GetVisitationResponse")]
        System.IAsyncResult BeginGetVisitation(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetVisitation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetVisitationByPatientID", ReplyAction="http://tempuri.org/IHospitalService/GetVisitationByPatientIDResponse")]
        System.IAsyncResult BeginGetVisitationByPatientID(long patient_id, System.AsyncCallback callback, object asyncState);
        
        string EndGetVisitationByPatientID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/MakeVisitationHistory", ReplyAction="http://tempuri.org/IHospitalService/MakeVisitationHistoryResponse")]
        System.IAsyncResult BeginMakeVisitationHistory(long id, string diagnose, System.AsyncCallback callback, object asyncState);
        
        bool EndMakeVisitationHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/AddNewVisitation", ReplyAction="http://tempuri.org/IHospitalService/AddNewVisitationResponse")]
        System.IAsyncResult BeginAddNewVisitation(long patient_id, long hospital_id, long doctor_id, string date, string reason, string description, System.AsyncCallback callback, object asyncState);
        
        bool EndAddNewVisitation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/EditVisitation", ReplyAction="http://tempuri.org/IHospitalService/EditVisitationResponse")]
        System.IAsyncResult BeginEditVisitation(long id, long hospital_id, long doctor_id, string date, string reason, string description, System.AsyncCallback callback, object asyncState);
        
        bool EndEditVisitation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/RatingHospital", ReplyAction="http://tempuri.org/IHospitalService/RatingHospitalResponse")]
        System.IAsyncResult BeginRatingHospital(long patient_id, long hospital_id, int rating, System.AsyncCallback callback, object asyncState);
        
        bool EndRatingHospital(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/RatingDoctor", ReplyAction="http://tempuri.org/IHospitalService/RatingDoctorResponse")]
        System.IAsyncResult BeginRatingDoctor(long patient_id, long doctor_id, int rating, System.AsyncCallback callback, object asyncState);
        
        bool EndRatingDoctor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetTemplate", ReplyAction="http://tempuri.org/IHospitalService/GetTemplateResponse")]
        System.IAsyncResult BeginGetTemplate(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetTemplate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetAllPatientTemplates", ReplyAction="http://tempuri.org/IHospitalService/GetAllPatientTemplatesResponse")]
        System.IAsyncResult BeginGetAllPatientTemplates(long patient_id, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllPatientTemplates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/AddTemplate", ReplyAction="http://tempuri.org/IHospitalService/AddTemplateResponse")]
        System.IAsyncResult BeginAddTemplate(long patient_id, long hospital_id, long doctor_id, string title, string reason, string description, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTemplate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/EditTemplate", ReplyAction="http://tempuri.org/IHospitalService/EditTemplateResponse")]
        System.IAsyncResult BeginEditTemplate(long id, long hospital_id, long doctor_id, string title, string reason, string description, System.AsyncCallback callback, object asyncState);
        
        bool EndEditTemplate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetRecommendedVisitation", ReplyAction="http://tempuri.org/IHospitalService/GetRecommendedVisitationResponse")]
        System.IAsyncResult BeginGetRecommendedVisitation(long id, System.AsyncCallback callback, object asyncState);
        
        string EndGetRecommendedVisitation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IHospitalService/GetRecommendedVisitationForPatient", ReplyAction="http://tempuri.org/IHospitalService/GetRecommendedVisitationForPatientResponse")]
        System.IAsyncResult BeginGetRecommendedVisitationForPatient(int age, System.AsyncCallback callback, object asyncState);
        
        string EndGetRecommendedVisitationForPatient(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHospitalServiceChannel : PersonalHealth.WebService.HospitalServiceReference.IHospitalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPatientByUsernameAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientByUsernameAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPatientByEGNAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientByEGNAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNewPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNewPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHospitalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHospitalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllHospitalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllHospitalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDoctorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDoctorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDoctorsByHospitalIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDoctorsByHospitalIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllDoctorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllDoctorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPatientAllergiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientAllergiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAllergiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAllergiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHospitalRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHospitalRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHospitalRecordByPatientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHospitalRecordByPatientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNewHospitalRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNewHospitalRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVisitationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVisitationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVisitationByPatientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVisitationByPatientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeVisitationHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeVisitationHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNewVisitationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNewVisitationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditVisitationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditVisitationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RatingHospitalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RatingHospitalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RatingDoctorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RatingDoctorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPatientTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPatientTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecommendedVisitationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecommendedVisitationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecommendedVisitationForPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecommendedVisitationForPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HospitalServiceClient : System.ServiceModel.ClientBase<PersonalHealth.WebService.HospitalServiceReference.IHospitalService>, PersonalHealth.WebService.HospitalServiceReference.IHospitalService {
        
        private BeginOperationDelegate onBeginGetPatientDelegate;
        
        private EndOperationDelegate onEndGetPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPatientByUsernameAndPasswordDelegate;
        
        private EndOperationDelegate onEndGetPatientByUsernameAndPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientByUsernameAndPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPatientByEGNAndPasswordDelegate;
        
        private EndOperationDelegate onEndGetPatientByEGNAndPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientByEGNAndPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNewPatientDelegate;
        
        private EndOperationDelegate onEndAddNewPatientDelegate;
        
        private System.Threading.SendOrPostCallback onAddNewPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHospitalDelegate;
        
        private EndOperationDelegate onEndGetHospitalDelegate;
        
        private System.Threading.SendOrPostCallback onGetHospitalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllHospitalsDelegate;
        
        private EndOperationDelegate onEndGetAllHospitalsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllHospitalsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDoctorDelegate;
        
        private EndOperationDelegate onEndGetDoctorDelegate;
        
        private System.Threading.SendOrPostCallback onGetDoctorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDoctorsByHospitalIdDelegate;
        
        private EndOperationDelegate onEndGetDoctorsByHospitalIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetDoctorsByHospitalIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllDoctorsDelegate;
        
        private EndOperationDelegate onEndGetAllDoctorsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllDoctorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPatientAllergiesDelegate;
        
        private EndOperationDelegate onEndGetPatientAllergiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientAllergiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAllergiesDelegate;
        
        private EndOperationDelegate onEndGetAllAllergiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAllergiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHospitalRecordDelegate;
        
        private EndOperationDelegate onEndGetHospitalRecordDelegate;
        
        private System.Threading.SendOrPostCallback onGetHospitalRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHospitalRecordByPatientIDDelegate;
        
        private EndOperationDelegate onEndGetHospitalRecordByPatientIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetHospitalRecordByPatientIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNewHospitalRecordDelegate;
        
        private EndOperationDelegate onEndAddNewHospitalRecordDelegate;
        
        private System.Threading.SendOrPostCallback onAddNewHospitalRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVisitationDelegate;
        
        private EndOperationDelegate onEndGetVisitationDelegate;
        
        private System.Threading.SendOrPostCallback onGetVisitationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVisitationByPatientIDDelegate;
        
        private EndOperationDelegate onEndGetVisitationByPatientIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetVisitationByPatientIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeVisitationHistoryDelegate;
        
        private EndOperationDelegate onEndMakeVisitationHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onMakeVisitationHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNewVisitationDelegate;
        
        private EndOperationDelegate onEndAddNewVisitationDelegate;
        
        private System.Threading.SendOrPostCallback onAddNewVisitationCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditVisitationDelegate;
        
        private EndOperationDelegate onEndEditVisitationDelegate;
        
        private System.Threading.SendOrPostCallback onEditVisitationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRatingHospitalDelegate;
        
        private EndOperationDelegate onEndRatingHospitalDelegate;
        
        private System.Threading.SendOrPostCallback onRatingHospitalCompletedDelegate;
        
        private BeginOperationDelegate onBeginRatingDoctorDelegate;
        
        private EndOperationDelegate onEndRatingDoctorDelegate;
        
        private System.Threading.SendOrPostCallback onRatingDoctorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTemplateDelegate;
        
        private EndOperationDelegate onEndGetTemplateDelegate;
        
        private System.Threading.SendOrPostCallback onGetTemplateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllPatientTemplatesDelegate;
        
        private EndOperationDelegate onEndGetAllPatientTemplatesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPatientTemplatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTemplateDelegate;
        
        private EndOperationDelegate onEndAddTemplateDelegate;
        
        private System.Threading.SendOrPostCallback onAddTemplateCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditTemplateDelegate;
        
        private EndOperationDelegate onEndEditTemplateDelegate;
        
        private System.Threading.SendOrPostCallback onEditTemplateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecommendedVisitationDelegate;
        
        private EndOperationDelegate onEndGetRecommendedVisitationDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecommendedVisitationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecommendedVisitationForPatientDelegate;
        
        private EndOperationDelegate onEndGetRecommendedVisitationForPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecommendedVisitationForPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public HospitalServiceClient() {
        }
        
        public HospitalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HospitalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HospitalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HospitalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetPatientCompletedEventArgs> GetPatientCompleted;
        
        public event System.EventHandler<GetPatientByUsernameAndPasswordCompletedEventArgs> GetPatientByUsernameAndPasswordCompleted;
        
        public event System.EventHandler<GetPatientByEGNAndPasswordCompletedEventArgs> GetPatientByEGNAndPasswordCompleted;
        
        public event System.EventHandler<AddNewPatientCompletedEventArgs> AddNewPatientCompleted;
        
        public event System.EventHandler<GetHospitalCompletedEventArgs> GetHospitalCompleted;
        
        public event System.EventHandler<GetAllHospitalsCompletedEventArgs> GetAllHospitalsCompleted;
        
        public event System.EventHandler<GetDoctorCompletedEventArgs> GetDoctorCompleted;
        
        public event System.EventHandler<GetDoctorsByHospitalIdCompletedEventArgs> GetDoctorsByHospitalIdCompleted;
        
        public event System.EventHandler<GetAllDoctorsCompletedEventArgs> GetAllDoctorsCompleted;
        
        public event System.EventHandler<GetPatientAllergiesCompletedEventArgs> GetPatientAllergiesCompleted;
        
        public event System.EventHandler<GetAllAllergiesCompletedEventArgs> GetAllAllergiesCompleted;
        
        public event System.EventHandler<GetHospitalRecordCompletedEventArgs> GetHospitalRecordCompleted;
        
        public event System.EventHandler<GetHospitalRecordByPatientIDCompletedEventArgs> GetHospitalRecordByPatientIDCompleted;
        
        public event System.EventHandler<AddNewHospitalRecordCompletedEventArgs> AddNewHospitalRecordCompleted;
        
        public event System.EventHandler<GetVisitationCompletedEventArgs> GetVisitationCompleted;
        
        public event System.EventHandler<GetVisitationByPatientIDCompletedEventArgs> GetVisitationByPatientIDCompleted;
        
        public event System.EventHandler<MakeVisitationHistoryCompletedEventArgs> MakeVisitationHistoryCompleted;
        
        public event System.EventHandler<AddNewVisitationCompletedEventArgs> AddNewVisitationCompleted;
        
        public event System.EventHandler<EditVisitationCompletedEventArgs> EditVisitationCompleted;
        
        public event System.EventHandler<RatingHospitalCompletedEventArgs> RatingHospitalCompleted;
        
        public event System.EventHandler<RatingDoctorCompletedEventArgs> RatingDoctorCompleted;
        
        public event System.EventHandler<GetTemplateCompletedEventArgs> GetTemplateCompleted;
        
        public event System.EventHandler<GetAllPatientTemplatesCompletedEventArgs> GetAllPatientTemplatesCompleted;
        
        public event System.EventHandler<AddTemplateCompletedEventArgs> AddTemplateCompleted;
        
        public event System.EventHandler<EditTemplateCompletedEventArgs> EditTemplateCompleted;
        
        public event System.EventHandler<GetRecommendedVisitationCompletedEventArgs> GetRecommendedVisitationCompleted;
        
        public event System.EventHandler<GetRecommendedVisitationForPatientCompletedEventArgs> GetRecommendedVisitationForPatientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetPatient(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatient(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetPatient(System.IAsyncResult result) {
            return base.Channel.EndGetPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetPatient(id, callback, asyncState);
        }
        
        private object[] OnEndGetPatient(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientCompleted(object state) {
            if ((this.GetPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientCompleted(this, new GetPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientAsync(long id) {
            this.GetPatientAsync(id, null);
        }
        
        public void GetPatientAsync(long id, object userState) {
            if ((this.onBeginGetPatientDelegate == null)) {
                this.onBeginGetPatientDelegate = new BeginOperationDelegate(this.OnBeginGetPatient);
            }
            if ((this.onEndGetPatientDelegate == null)) {
                this.onEndGetPatientDelegate = new EndOperationDelegate(this.OnEndGetPatient);
            }
            if ((this.onGetPatientCompletedDelegate == null)) {
                this.onGetPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientDelegate, new object[] {
                        id}, this.onEndGetPatientDelegate, this.onGetPatientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetPatientByUsernameAndPassword(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatientByUsernameAndPassword(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetPatientByUsernameAndPassword(System.IAsyncResult result) {
            return base.Channel.EndGetPatientByUsernameAndPassword(result);
        }
        
        private System.IAsyncResult OnBeginGetPatientByUsernameAndPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetPatientByUsernameAndPassword(username, password, callback, asyncState);
        }
        
        private object[] OnEndGetPatientByUsernameAndPassword(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetPatientByUsernameAndPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientByUsernameAndPasswordCompleted(object state) {
            if ((this.GetPatientByUsernameAndPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientByUsernameAndPasswordCompleted(this, new GetPatientByUsernameAndPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientByUsernameAndPasswordAsync(string username, string password) {
            this.GetPatientByUsernameAndPasswordAsync(username, password, null);
        }
        
        public void GetPatientByUsernameAndPasswordAsync(string username, string password, object userState) {
            if ((this.onBeginGetPatientByUsernameAndPasswordDelegate == null)) {
                this.onBeginGetPatientByUsernameAndPasswordDelegate = new BeginOperationDelegate(this.OnBeginGetPatientByUsernameAndPassword);
            }
            if ((this.onEndGetPatientByUsernameAndPasswordDelegate == null)) {
                this.onEndGetPatientByUsernameAndPasswordDelegate = new EndOperationDelegate(this.OnEndGetPatientByUsernameAndPassword);
            }
            if ((this.onGetPatientByUsernameAndPasswordCompletedDelegate == null)) {
                this.onGetPatientByUsernameAndPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientByUsernameAndPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientByUsernameAndPasswordDelegate, new object[] {
                        username,
                        password}, this.onEndGetPatientByUsernameAndPasswordDelegate, this.onGetPatientByUsernameAndPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetPatientByEGNAndPassword(string egn, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatientByEGNAndPassword(egn, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetPatientByEGNAndPassword(System.IAsyncResult result) {
            return base.Channel.EndGetPatientByEGNAndPassword(result);
        }
        
        private System.IAsyncResult OnBeginGetPatientByEGNAndPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string egn = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetPatientByEGNAndPassword(egn, password, callback, asyncState);
        }
        
        private object[] OnEndGetPatientByEGNAndPassword(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetPatientByEGNAndPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientByEGNAndPasswordCompleted(object state) {
            if ((this.GetPatientByEGNAndPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientByEGNAndPasswordCompleted(this, new GetPatientByEGNAndPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientByEGNAndPasswordAsync(string egn, string password) {
            this.GetPatientByEGNAndPasswordAsync(egn, password, null);
        }
        
        public void GetPatientByEGNAndPasswordAsync(string egn, string password, object userState) {
            if ((this.onBeginGetPatientByEGNAndPasswordDelegate == null)) {
                this.onBeginGetPatientByEGNAndPasswordDelegate = new BeginOperationDelegate(this.OnBeginGetPatientByEGNAndPassword);
            }
            if ((this.onEndGetPatientByEGNAndPasswordDelegate == null)) {
                this.onEndGetPatientByEGNAndPasswordDelegate = new EndOperationDelegate(this.OnEndGetPatientByEGNAndPassword);
            }
            if ((this.onGetPatientByEGNAndPasswordCompletedDelegate == null)) {
                this.onGetPatientByEGNAndPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientByEGNAndPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientByEGNAndPasswordDelegate, new object[] {
                        egn,
                        password}, this.onEndGetPatientByEGNAndPasswordDelegate, this.onGetPatientByEGNAndPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginAddNewPatient(string username, string password, string first_name, string second_name, string last_name, string egn, string gender, int age, string birth_date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNewPatient(username, password, first_name, second_name, last_name, egn, gender, age, birth_date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndAddNewPatient(System.IAsyncResult result) {
            return base.Channel.EndAddNewPatient(result);
        }
        
        private System.IAsyncResult OnBeginAddNewPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string first_name = ((string)(inValues[2]));
            string second_name = ((string)(inValues[3]));
            string last_name = ((string)(inValues[4]));
            string egn = ((string)(inValues[5]));
            string gender = ((string)(inValues[6]));
            int age = ((int)(inValues[7]));
            string birth_date = ((string)(inValues[8]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginAddNewPatient(username, password, first_name, second_name, last_name, egn, gender, age, birth_date, callback, asyncState);
        }
        
        private object[] OnEndAddNewPatient(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndAddNewPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNewPatientCompleted(object state) {
            if ((this.AddNewPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNewPatientCompleted(this, new AddNewPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNewPatientAsync(string username, string password, string first_name, string second_name, string last_name, string egn, string gender, int age, string birth_date) {
            this.AddNewPatientAsync(username, password, first_name, second_name, last_name, egn, gender, age, birth_date, null);
        }
        
        public void AddNewPatientAsync(string username, string password, string first_name, string second_name, string last_name, string egn, string gender, int age, string birth_date, object userState) {
            if ((this.onBeginAddNewPatientDelegate == null)) {
                this.onBeginAddNewPatientDelegate = new BeginOperationDelegate(this.OnBeginAddNewPatient);
            }
            if ((this.onEndAddNewPatientDelegate == null)) {
                this.onEndAddNewPatientDelegate = new EndOperationDelegate(this.OnEndAddNewPatient);
            }
            if ((this.onAddNewPatientCompletedDelegate == null)) {
                this.onAddNewPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNewPatientCompleted);
            }
            base.InvokeAsync(this.onBeginAddNewPatientDelegate, new object[] {
                        username,
                        password,
                        first_name,
                        second_name,
                        last_name,
                        egn,
                        gender,
                        age,
                        birth_date}, this.onEndAddNewPatientDelegate, this.onAddNewPatientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetHospital(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHospital(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetHospital(System.IAsyncResult result) {
            return base.Channel.EndGetHospital(result);
        }
        
        private System.IAsyncResult OnBeginGetHospital(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetHospital(id, callback, asyncState);
        }
        
        private object[] OnEndGetHospital(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetHospital(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHospitalCompleted(object state) {
            if ((this.GetHospitalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHospitalCompleted(this, new GetHospitalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHospitalAsync(long id) {
            this.GetHospitalAsync(id, null);
        }
        
        public void GetHospitalAsync(long id, object userState) {
            if ((this.onBeginGetHospitalDelegate == null)) {
                this.onBeginGetHospitalDelegate = new BeginOperationDelegate(this.OnBeginGetHospital);
            }
            if ((this.onEndGetHospitalDelegate == null)) {
                this.onEndGetHospitalDelegate = new EndOperationDelegate(this.OnEndGetHospital);
            }
            if ((this.onGetHospitalCompletedDelegate == null)) {
                this.onGetHospitalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHospitalCompleted);
            }
            base.InvokeAsync(this.onBeginGetHospitalDelegate, new object[] {
                        id}, this.onEndGetHospitalDelegate, this.onGetHospitalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetAllHospitals(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllHospitals(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetAllHospitals(System.IAsyncResult result) {
            return base.Channel.EndGetAllHospitals(result);
        }
        
        private System.IAsyncResult OnBeginGetAllHospitals(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetAllHospitals(callback, asyncState);
        }
        
        private object[] OnEndGetAllHospitals(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetAllHospitals(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllHospitalsCompleted(object state) {
            if ((this.GetAllHospitalsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllHospitalsCompleted(this, new GetAllHospitalsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllHospitalsAsync() {
            this.GetAllHospitalsAsync(null);
        }
        
        public void GetAllHospitalsAsync(object userState) {
            if ((this.onBeginGetAllHospitalsDelegate == null)) {
                this.onBeginGetAllHospitalsDelegate = new BeginOperationDelegate(this.OnBeginGetAllHospitals);
            }
            if ((this.onEndGetAllHospitalsDelegate == null)) {
                this.onEndGetAllHospitalsDelegate = new EndOperationDelegate(this.OnEndGetAllHospitals);
            }
            if ((this.onGetAllHospitalsCompletedDelegate == null)) {
                this.onGetAllHospitalsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllHospitalsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllHospitalsDelegate, null, this.onEndGetAllHospitalsDelegate, this.onGetAllHospitalsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetDoctor(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDoctor(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetDoctor(System.IAsyncResult result) {
            return base.Channel.EndGetDoctor(result);
        }
        
        private System.IAsyncResult OnBeginGetDoctor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetDoctor(id, callback, asyncState);
        }
        
        private object[] OnEndGetDoctor(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetDoctor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDoctorCompleted(object state) {
            if ((this.GetDoctorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDoctorCompleted(this, new GetDoctorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDoctorAsync(long id) {
            this.GetDoctorAsync(id, null);
        }
        
        public void GetDoctorAsync(long id, object userState) {
            if ((this.onBeginGetDoctorDelegate == null)) {
                this.onBeginGetDoctorDelegate = new BeginOperationDelegate(this.OnBeginGetDoctor);
            }
            if ((this.onEndGetDoctorDelegate == null)) {
                this.onEndGetDoctorDelegate = new EndOperationDelegate(this.OnEndGetDoctor);
            }
            if ((this.onGetDoctorCompletedDelegate == null)) {
                this.onGetDoctorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDoctorCompleted);
            }
            base.InvokeAsync(this.onBeginGetDoctorDelegate, new object[] {
                        id}, this.onEndGetDoctorDelegate, this.onGetDoctorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetDoctorsByHospitalId(long hospital_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDoctorsByHospitalId(hospital_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetDoctorsByHospitalId(System.IAsyncResult result) {
            return base.Channel.EndGetDoctorsByHospitalId(result);
        }
        
        private System.IAsyncResult OnBeginGetDoctorsByHospitalId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long hospital_id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetDoctorsByHospitalId(hospital_id, callback, asyncState);
        }
        
        private object[] OnEndGetDoctorsByHospitalId(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetDoctorsByHospitalId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDoctorsByHospitalIdCompleted(object state) {
            if ((this.GetDoctorsByHospitalIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDoctorsByHospitalIdCompleted(this, new GetDoctorsByHospitalIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDoctorsByHospitalIdAsync(long hospital_id) {
            this.GetDoctorsByHospitalIdAsync(hospital_id, null);
        }
        
        public void GetDoctorsByHospitalIdAsync(long hospital_id, object userState) {
            if ((this.onBeginGetDoctorsByHospitalIdDelegate == null)) {
                this.onBeginGetDoctorsByHospitalIdDelegate = new BeginOperationDelegate(this.OnBeginGetDoctorsByHospitalId);
            }
            if ((this.onEndGetDoctorsByHospitalIdDelegate == null)) {
                this.onEndGetDoctorsByHospitalIdDelegate = new EndOperationDelegate(this.OnEndGetDoctorsByHospitalId);
            }
            if ((this.onGetDoctorsByHospitalIdCompletedDelegate == null)) {
                this.onGetDoctorsByHospitalIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDoctorsByHospitalIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetDoctorsByHospitalIdDelegate, new object[] {
                        hospital_id}, this.onEndGetDoctorsByHospitalIdDelegate, this.onGetDoctorsByHospitalIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetAllDoctors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllDoctors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetAllDoctors(System.IAsyncResult result) {
            return base.Channel.EndGetAllDoctors(result);
        }
        
        private System.IAsyncResult OnBeginGetAllDoctors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetAllDoctors(callback, asyncState);
        }
        
        private object[] OnEndGetAllDoctors(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetAllDoctors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllDoctorsCompleted(object state) {
            if ((this.GetAllDoctorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllDoctorsCompleted(this, new GetAllDoctorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllDoctorsAsync() {
            this.GetAllDoctorsAsync(null);
        }
        
        public void GetAllDoctorsAsync(object userState) {
            if ((this.onBeginGetAllDoctorsDelegate == null)) {
                this.onBeginGetAllDoctorsDelegate = new BeginOperationDelegate(this.OnBeginGetAllDoctors);
            }
            if ((this.onEndGetAllDoctorsDelegate == null)) {
                this.onEndGetAllDoctorsDelegate = new EndOperationDelegate(this.OnEndGetAllDoctors);
            }
            if ((this.onGetAllDoctorsCompletedDelegate == null)) {
                this.onGetAllDoctorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllDoctorsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllDoctorsDelegate, null, this.onEndGetAllDoctorsDelegate, this.onGetAllDoctorsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetPatientAllergies(long patient_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatientAllergies(patient_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetPatientAllergies(System.IAsyncResult result) {
            return base.Channel.EndGetPatientAllergies(result);
        }
        
        private System.IAsyncResult OnBeginGetPatientAllergies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetPatientAllergies(patient_id, callback, asyncState);
        }
        
        private object[] OnEndGetPatientAllergies(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetPatientAllergies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientAllergiesCompleted(object state) {
            if ((this.GetPatientAllergiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientAllergiesCompleted(this, new GetPatientAllergiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientAllergiesAsync(long patient_id) {
            this.GetPatientAllergiesAsync(patient_id, null);
        }
        
        public void GetPatientAllergiesAsync(long patient_id, object userState) {
            if ((this.onBeginGetPatientAllergiesDelegate == null)) {
                this.onBeginGetPatientAllergiesDelegate = new BeginOperationDelegate(this.OnBeginGetPatientAllergies);
            }
            if ((this.onEndGetPatientAllergiesDelegate == null)) {
                this.onEndGetPatientAllergiesDelegate = new EndOperationDelegate(this.OnEndGetPatientAllergies);
            }
            if ((this.onGetPatientAllergiesCompletedDelegate == null)) {
                this.onGetPatientAllergiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientAllergiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientAllergiesDelegate, new object[] {
                        patient_id}, this.onEndGetPatientAllergiesDelegate, this.onGetPatientAllergiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetAllAllergies(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAllergies(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetAllAllergies(System.IAsyncResult result) {
            return base.Channel.EndGetAllAllergies(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAllergies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetAllAllergies(callback, asyncState);
        }
        
        private object[] OnEndGetAllAllergies(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetAllAllergies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAllergiesCompleted(object state) {
            if ((this.GetAllAllergiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAllergiesCompleted(this, new GetAllAllergiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAllergiesAsync() {
            this.GetAllAllergiesAsync(null);
        }
        
        public void GetAllAllergiesAsync(object userState) {
            if ((this.onBeginGetAllAllergiesDelegate == null)) {
                this.onBeginGetAllAllergiesDelegate = new BeginOperationDelegate(this.OnBeginGetAllAllergies);
            }
            if ((this.onEndGetAllAllergiesDelegate == null)) {
                this.onEndGetAllAllergiesDelegate = new EndOperationDelegate(this.OnEndGetAllAllergies);
            }
            if ((this.onGetAllAllergiesCompletedDelegate == null)) {
                this.onGetAllAllergiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAllergiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAllergiesDelegate, null, this.onEndGetAllAllergiesDelegate, this.onGetAllAllergiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetHospitalRecord(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHospitalRecord(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetHospitalRecord(System.IAsyncResult result) {
            return base.Channel.EndGetHospitalRecord(result);
        }
        
        private System.IAsyncResult OnBeginGetHospitalRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetHospitalRecord(id, callback, asyncState);
        }
        
        private object[] OnEndGetHospitalRecord(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetHospitalRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHospitalRecordCompleted(object state) {
            if ((this.GetHospitalRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHospitalRecordCompleted(this, new GetHospitalRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHospitalRecordAsync(long id) {
            this.GetHospitalRecordAsync(id, null);
        }
        
        public void GetHospitalRecordAsync(long id, object userState) {
            if ((this.onBeginGetHospitalRecordDelegate == null)) {
                this.onBeginGetHospitalRecordDelegate = new BeginOperationDelegate(this.OnBeginGetHospitalRecord);
            }
            if ((this.onEndGetHospitalRecordDelegate == null)) {
                this.onEndGetHospitalRecordDelegate = new EndOperationDelegate(this.OnEndGetHospitalRecord);
            }
            if ((this.onGetHospitalRecordCompletedDelegate == null)) {
                this.onGetHospitalRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHospitalRecordCompleted);
            }
            base.InvokeAsync(this.onBeginGetHospitalRecordDelegate, new object[] {
                        id}, this.onEndGetHospitalRecordDelegate, this.onGetHospitalRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetHospitalRecordByPatientID(long patient_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHospitalRecordByPatientID(patient_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetHospitalRecordByPatientID(System.IAsyncResult result) {
            return base.Channel.EndGetHospitalRecordByPatientID(result);
        }
        
        private System.IAsyncResult OnBeginGetHospitalRecordByPatientID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetHospitalRecordByPatientID(patient_id, callback, asyncState);
        }
        
        private object[] OnEndGetHospitalRecordByPatientID(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetHospitalRecordByPatientID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHospitalRecordByPatientIDCompleted(object state) {
            if ((this.GetHospitalRecordByPatientIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHospitalRecordByPatientIDCompleted(this, new GetHospitalRecordByPatientIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHospitalRecordByPatientIDAsync(long patient_id) {
            this.GetHospitalRecordByPatientIDAsync(patient_id, null);
        }
        
        public void GetHospitalRecordByPatientIDAsync(long patient_id, object userState) {
            if ((this.onBeginGetHospitalRecordByPatientIDDelegate == null)) {
                this.onBeginGetHospitalRecordByPatientIDDelegate = new BeginOperationDelegate(this.OnBeginGetHospitalRecordByPatientID);
            }
            if ((this.onEndGetHospitalRecordByPatientIDDelegate == null)) {
                this.onEndGetHospitalRecordByPatientIDDelegate = new EndOperationDelegate(this.OnEndGetHospitalRecordByPatientID);
            }
            if ((this.onGetHospitalRecordByPatientIDCompletedDelegate == null)) {
                this.onGetHospitalRecordByPatientIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHospitalRecordByPatientIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetHospitalRecordByPatientIDDelegate, new object[] {
                        patient_id}, this.onEndGetHospitalRecordByPatientIDDelegate, this.onGetHospitalRecordByPatientIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginAddNewHospitalRecord(long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNewHospitalRecord(patient_id, hospital_id, doctor_id, reason, diagnose, date, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndAddNewHospitalRecord(System.IAsyncResult result) {
            return base.Channel.EndAddNewHospitalRecord(result);
        }
        
        private System.IAsyncResult OnBeginAddNewHospitalRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            long hospital_id = ((long)(inValues[1]));
            long doctor_id = ((long)(inValues[2]));
            string reason = ((string)(inValues[3]));
            string diagnose = ((string)(inValues[4]));
            string date = ((string)(inValues[5]));
            string description = ((string)(inValues[6]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginAddNewHospitalRecord(patient_id, hospital_id, doctor_id, reason, diagnose, date, description, callback, asyncState);
        }
        
        private object[] OnEndAddNewHospitalRecord(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndAddNewHospitalRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNewHospitalRecordCompleted(object state) {
            if ((this.AddNewHospitalRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNewHospitalRecordCompleted(this, new AddNewHospitalRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNewHospitalRecordAsync(long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description) {
            this.AddNewHospitalRecordAsync(patient_id, hospital_id, doctor_id, reason, diagnose, date, description, null);
        }
        
        public void AddNewHospitalRecordAsync(long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description, object userState) {
            if ((this.onBeginAddNewHospitalRecordDelegate == null)) {
                this.onBeginAddNewHospitalRecordDelegate = new BeginOperationDelegate(this.OnBeginAddNewHospitalRecord);
            }
            if ((this.onEndAddNewHospitalRecordDelegate == null)) {
                this.onEndAddNewHospitalRecordDelegate = new EndOperationDelegate(this.OnEndAddNewHospitalRecord);
            }
            if ((this.onAddNewHospitalRecordCompletedDelegate == null)) {
                this.onAddNewHospitalRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNewHospitalRecordCompleted);
            }
            base.InvokeAsync(this.onBeginAddNewHospitalRecordDelegate, new object[] {
                        patient_id,
                        hospital_id,
                        doctor_id,
                        reason,
                        diagnose,
                        date,
                        description}, this.onEndAddNewHospitalRecordDelegate, this.onAddNewHospitalRecordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetVisitation(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVisitation(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetVisitation(System.IAsyncResult result) {
            return base.Channel.EndGetVisitation(result);
        }
        
        private System.IAsyncResult OnBeginGetVisitation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetVisitation(id, callback, asyncState);
        }
        
        private object[] OnEndGetVisitation(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetVisitation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVisitationCompleted(object state) {
            if ((this.GetVisitationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVisitationCompleted(this, new GetVisitationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVisitationAsync(long id) {
            this.GetVisitationAsync(id, null);
        }
        
        public void GetVisitationAsync(long id, object userState) {
            if ((this.onBeginGetVisitationDelegate == null)) {
                this.onBeginGetVisitationDelegate = new BeginOperationDelegate(this.OnBeginGetVisitation);
            }
            if ((this.onEndGetVisitationDelegate == null)) {
                this.onEndGetVisitationDelegate = new EndOperationDelegate(this.OnEndGetVisitation);
            }
            if ((this.onGetVisitationCompletedDelegate == null)) {
                this.onGetVisitationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVisitationCompleted);
            }
            base.InvokeAsync(this.onBeginGetVisitationDelegate, new object[] {
                        id}, this.onEndGetVisitationDelegate, this.onGetVisitationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetVisitationByPatientID(long patient_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVisitationByPatientID(patient_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetVisitationByPatientID(System.IAsyncResult result) {
            return base.Channel.EndGetVisitationByPatientID(result);
        }
        
        private System.IAsyncResult OnBeginGetVisitationByPatientID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetVisitationByPatientID(patient_id, callback, asyncState);
        }
        
        private object[] OnEndGetVisitationByPatientID(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetVisitationByPatientID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVisitationByPatientIDCompleted(object state) {
            if ((this.GetVisitationByPatientIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVisitationByPatientIDCompleted(this, new GetVisitationByPatientIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVisitationByPatientIDAsync(long patient_id) {
            this.GetVisitationByPatientIDAsync(patient_id, null);
        }
        
        public void GetVisitationByPatientIDAsync(long patient_id, object userState) {
            if ((this.onBeginGetVisitationByPatientIDDelegate == null)) {
                this.onBeginGetVisitationByPatientIDDelegate = new BeginOperationDelegate(this.OnBeginGetVisitationByPatientID);
            }
            if ((this.onEndGetVisitationByPatientIDDelegate == null)) {
                this.onEndGetVisitationByPatientIDDelegate = new EndOperationDelegate(this.OnEndGetVisitationByPatientID);
            }
            if ((this.onGetVisitationByPatientIDCompletedDelegate == null)) {
                this.onGetVisitationByPatientIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVisitationByPatientIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetVisitationByPatientIDDelegate, new object[] {
                        patient_id}, this.onEndGetVisitationByPatientIDDelegate, this.onGetVisitationByPatientIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginMakeVisitationHistory(long id, string diagnose, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeVisitationHistory(id, diagnose, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndMakeVisitationHistory(System.IAsyncResult result) {
            return base.Channel.EndMakeVisitationHistory(result);
        }
        
        private System.IAsyncResult OnBeginMakeVisitationHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            string diagnose = ((string)(inValues[1]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginMakeVisitationHistory(id, diagnose, callback, asyncState);
        }
        
        private object[] OnEndMakeVisitationHistory(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndMakeVisitationHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeVisitationHistoryCompleted(object state) {
            if ((this.MakeVisitationHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeVisitationHistoryCompleted(this, new MakeVisitationHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeVisitationHistoryAsync(long id, string diagnose) {
            this.MakeVisitationHistoryAsync(id, diagnose, null);
        }
        
        public void MakeVisitationHistoryAsync(long id, string diagnose, object userState) {
            if ((this.onBeginMakeVisitationHistoryDelegate == null)) {
                this.onBeginMakeVisitationHistoryDelegate = new BeginOperationDelegate(this.OnBeginMakeVisitationHistory);
            }
            if ((this.onEndMakeVisitationHistoryDelegate == null)) {
                this.onEndMakeVisitationHistoryDelegate = new EndOperationDelegate(this.OnEndMakeVisitationHistory);
            }
            if ((this.onMakeVisitationHistoryCompletedDelegate == null)) {
                this.onMakeVisitationHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeVisitationHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginMakeVisitationHistoryDelegate, new object[] {
                        id,
                        diagnose}, this.onEndMakeVisitationHistoryDelegate, this.onMakeVisitationHistoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginAddNewVisitation(long patient_id, long hospital_id, long doctor_id, string date, string reason, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNewVisitation(patient_id, hospital_id, doctor_id, date, reason, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndAddNewVisitation(System.IAsyncResult result) {
            return base.Channel.EndAddNewVisitation(result);
        }
        
        private System.IAsyncResult OnBeginAddNewVisitation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            long hospital_id = ((long)(inValues[1]));
            long doctor_id = ((long)(inValues[2]));
            string date = ((string)(inValues[3]));
            string reason = ((string)(inValues[4]));
            string description = ((string)(inValues[5]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginAddNewVisitation(patient_id, hospital_id, doctor_id, date, reason, description, callback, asyncState);
        }
        
        private object[] OnEndAddNewVisitation(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndAddNewVisitation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNewVisitationCompleted(object state) {
            if ((this.AddNewVisitationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNewVisitationCompleted(this, new AddNewVisitationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNewVisitationAsync(long patient_id, long hospital_id, long doctor_id, string date, string reason, string description) {
            this.AddNewVisitationAsync(patient_id, hospital_id, doctor_id, date, reason, description, null);
        }
        
        public void AddNewVisitationAsync(long patient_id, long hospital_id, long doctor_id, string date, string reason, string description, object userState) {
            if ((this.onBeginAddNewVisitationDelegate == null)) {
                this.onBeginAddNewVisitationDelegate = new BeginOperationDelegate(this.OnBeginAddNewVisitation);
            }
            if ((this.onEndAddNewVisitationDelegate == null)) {
                this.onEndAddNewVisitationDelegate = new EndOperationDelegate(this.OnEndAddNewVisitation);
            }
            if ((this.onAddNewVisitationCompletedDelegate == null)) {
                this.onAddNewVisitationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNewVisitationCompleted);
            }
            base.InvokeAsync(this.onBeginAddNewVisitationDelegate, new object[] {
                        patient_id,
                        hospital_id,
                        doctor_id,
                        date,
                        reason,
                        description}, this.onEndAddNewVisitationDelegate, this.onAddNewVisitationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginEditVisitation(long id, long hospital_id, long doctor_id, string date, string reason, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditVisitation(id, hospital_id, doctor_id, date, reason, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndEditVisitation(System.IAsyncResult result) {
            return base.Channel.EndEditVisitation(result);
        }
        
        private System.IAsyncResult OnBeginEditVisitation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            long hospital_id = ((long)(inValues[1]));
            long doctor_id = ((long)(inValues[2]));
            string date = ((string)(inValues[3]));
            string reason = ((string)(inValues[4]));
            string description = ((string)(inValues[5]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginEditVisitation(id, hospital_id, doctor_id, date, reason, description, callback, asyncState);
        }
        
        private object[] OnEndEditVisitation(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndEditVisitation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditVisitationCompleted(object state) {
            if ((this.EditVisitationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditVisitationCompleted(this, new EditVisitationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditVisitationAsync(long id, long hospital_id, long doctor_id, string date, string reason, string description) {
            this.EditVisitationAsync(id, hospital_id, doctor_id, date, reason, description, null);
        }
        
        public void EditVisitationAsync(long id, long hospital_id, long doctor_id, string date, string reason, string description, object userState) {
            if ((this.onBeginEditVisitationDelegate == null)) {
                this.onBeginEditVisitationDelegate = new BeginOperationDelegate(this.OnBeginEditVisitation);
            }
            if ((this.onEndEditVisitationDelegate == null)) {
                this.onEndEditVisitationDelegate = new EndOperationDelegate(this.OnEndEditVisitation);
            }
            if ((this.onEditVisitationCompletedDelegate == null)) {
                this.onEditVisitationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditVisitationCompleted);
            }
            base.InvokeAsync(this.onBeginEditVisitationDelegate, new object[] {
                        id,
                        hospital_id,
                        doctor_id,
                        date,
                        reason,
                        description}, this.onEndEditVisitationDelegate, this.onEditVisitationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginRatingHospital(long patient_id, long hospital_id, int rating, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRatingHospital(patient_id, hospital_id, rating, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndRatingHospital(System.IAsyncResult result) {
            return base.Channel.EndRatingHospital(result);
        }
        
        private System.IAsyncResult OnBeginRatingHospital(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            long hospital_id = ((long)(inValues[1]));
            int rating = ((int)(inValues[2]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginRatingHospital(patient_id, hospital_id, rating, callback, asyncState);
        }
        
        private object[] OnEndRatingHospital(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndRatingHospital(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRatingHospitalCompleted(object state) {
            if ((this.RatingHospitalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RatingHospitalCompleted(this, new RatingHospitalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RatingHospitalAsync(long patient_id, long hospital_id, int rating) {
            this.RatingHospitalAsync(patient_id, hospital_id, rating, null);
        }
        
        public void RatingHospitalAsync(long patient_id, long hospital_id, int rating, object userState) {
            if ((this.onBeginRatingHospitalDelegate == null)) {
                this.onBeginRatingHospitalDelegate = new BeginOperationDelegate(this.OnBeginRatingHospital);
            }
            if ((this.onEndRatingHospitalDelegate == null)) {
                this.onEndRatingHospitalDelegate = new EndOperationDelegate(this.OnEndRatingHospital);
            }
            if ((this.onRatingHospitalCompletedDelegate == null)) {
                this.onRatingHospitalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRatingHospitalCompleted);
            }
            base.InvokeAsync(this.onBeginRatingHospitalDelegate, new object[] {
                        patient_id,
                        hospital_id,
                        rating}, this.onEndRatingHospitalDelegate, this.onRatingHospitalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginRatingDoctor(long patient_id, long doctor_id, int rating, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRatingDoctor(patient_id, doctor_id, rating, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndRatingDoctor(System.IAsyncResult result) {
            return base.Channel.EndRatingDoctor(result);
        }
        
        private System.IAsyncResult OnBeginRatingDoctor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            long doctor_id = ((long)(inValues[1]));
            int rating = ((int)(inValues[2]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginRatingDoctor(patient_id, doctor_id, rating, callback, asyncState);
        }
        
        private object[] OnEndRatingDoctor(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndRatingDoctor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRatingDoctorCompleted(object state) {
            if ((this.RatingDoctorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RatingDoctorCompleted(this, new RatingDoctorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RatingDoctorAsync(long patient_id, long doctor_id, int rating) {
            this.RatingDoctorAsync(patient_id, doctor_id, rating, null);
        }
        
        public void RatingDoctorAsync(long patient_id, long doctor_id, int rating, object userState) {
            if ((this.onBeginRatingDoctorDelegate == null)) {
                this.onBeginRatingDoctorDelegate = new BeginOperationDelegate(this.OnBeginRatingDoctor);
            }
            if ((this.onEndRatingDoctorDelegate == null)) {
                this.onEndRatingDoctorDelegate = new EndOperationDelegate(this.OnEndRatingDoctor);
            }
            if ((this.onRatingDoctorCompletedDelegate == null)) {
                this.onRatingDoctorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRatingDoctorCompleted);
            }
            base.InvokeAsync(this.onBeginRatingDoctorDelegate, new object[] {
                        patient_id,
                        doctor_id,
                        rating}, this.onEndRatingDoctorDelegate, this.onRatingDoctorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetTemplate(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTemplate(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetTemplate(System.IAsyncResult result) {
            return base.Channel.EndGetTemplate(result);
        }
        
        private System.IAsyncResult OnBeginGetTemplate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetTemplate(id, callback, asyncState);
        }
        
        private object[] OnEndGetTemplate(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetTemplate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTemplateCompleted(object state) {
            if ((this.GetTemplateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTemplateCompleted(this, new GetTemplateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTemplateAsync(long id) {
            this.GetTemplateAsync(id, null);
        }
        
        public void GetTemplateAsync(long id, object userState) {
            if ((this.onBeginGetTemplateDelegate == null)) {
                this.onBeginGetTemplateDelegate = new BeginOperationDelegate(this.OnBeginGetTemplate);
            }
            if ((this.onEndGetTemplateDelegate == null)) {
                this.onEndGetTemplateDelegate = new EndOperationDelegate(this.OnEndGetTemplate);
            }
            if ((this.onGetTemplateCompletedDelegate == null)) {
                this.onGetTemplateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTemplateCompleted);
            }
            base.InvokeAsync(this.onBeginGetTemplateDelegate, new object[] {
                        id}, this.onEndGetTemplateDelegate, this.onGetTemplateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetAllPatientTemplates(long patient_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPatientTemplates(patient_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetAllPatientTemplates(System.IAsyncResult result) {
            return base.Channel.EndGetAllPatientTemplates(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPatientTemplates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetAllPatientTemplates(patient_id, callback, asyncState);
        }
        
        private object[] OnEndGetAllPatientTemplates(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetAllPatientTemplates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPatientTemplatesCompleted(object state) {
            if ((this.GetAllPatientTemplatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPatientTemplatesCompleted(this, new GetAllPatientTemplatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPatientTemplatesAsync(long patient_id) {
            this.GetAllPatientTemplatesAsync(patient_id, null);
        }
        
        public void GetAllPatientTemplatesAsync(long patient_id, object userState) {
            if ((this.onBeginGetAllPatientTemplatesDelegate == null)) {
                this.onBeginGetAllPatientTemplatesDelegate = new BeginOperationDelegate(this.OnBeginGetAllPatientTemplates);
            }
            if ((this.onEndGetAllPatientTemplatesDelegate == null)) {
                this.onEndGetAllPatientTemplatesDelegate = new EndOperationDelegate(this.OnEndGetAllPatientTemplates);
            }
            if ((this.onGetAllPatientTemplatesCompletedDelegate == null)) {
                this.onGetAllPatientTemplatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPatientTemplatesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPatientTemplatesDelegate, new object[] {
                        patient_id}, this.onEndGetAllPatientTemplatesDelegate, this.onGetAllPatientTemplatesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginAddTemplate(long patient_id, long hospital_id, long doctor_id, string title, string reason, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTemplate(patient_id, hospital_id, doctor_id, title, reason, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndAddTemplate(System.IAsyncResult result) {
            return base.Channel.EndAddTemplate(result);
        }
        
        private System.IAsyncResult OnBeginAddTemplate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long patient_id = ((long)(inValues[0]));
            long hospital_id = ((long)(inValues[1]));
            long doctor_id = ((long)(inValues[2]));
            string title = ((string)(inValues[3]));
            string reason = ((string)(inValues[4]));
            string description = ((string)(inValues[5]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginAddTemplate(patient_id, hospital_id, doctor_id, title, reason, description, callback, asyncState);
        }
        
        private object[] OnEndAddTemplate(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndAddTemplate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTemplateCompleted(object state) {
            if ((this.AddTemplateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTemplateCompleted(this, new AddTemplateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTemplateAsync(long patient_id, long hospital_id, long doctor_id, string title, string reason, string description) {
            this.AddTemplateAsync(patient_id, hospital_id, doctor_id, title, reason, description, null);
        }
        
        public void AddTemplateAsync(long patient_id, long hospital_id, long doctor_id, string title, string reason, string description, object userState) {
            if ((this.onBeginAddTemplateDelegate == null)) {
                this.onBeginAddTemplateDelegate = new BeginOperationDelegate(this.OnBeginAddTemplate);
            }
            if ((this.onEndAddTemplateDelegate == null)) {
                this.onEndAddTemplateDelegate = new EndOperationDelegate(this.OnEndAddTemplate);
            }
            if ((this.onAddTemplateCompletedDelegate == null)) {
                this.onAddTemplateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTemplateCompleted);
            }
            base.InvokeAsync(this.onBeginAddTemplateDelegate, new object[] {
                        patient_id,
                        hospital_id,
                        doctor_id,
                        title,
                        reason,
                        description}, this.onEndAddTemplateDelegate, this.onAddTemplateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginEditTemplate(long id, long hospital_id, long doctor_id, string title, string reason, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditTemplate(id, hospital_id, doctor_id, title, reason, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndEditTemplate(System.IAsyncResult result) {
            return base.Channel.EndEditTemplate(result);
        }
        
        private System.IAsyncResult OnBeginEditTemplate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            long hospital_id = ((long)(inValues[1]));
            long doctor_id = ((long)(inValues[2]));
            string title = ((string)(inValues[3]));
            string reason = ((string)(inValues[4]));
            string description = ((string)(inValues[5]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginEditTemplate(id, hospital_id, doctor_id, title, reason, description, callback, asyncState);
        }
        
        private object[] OnEndEditTemplate(System.IAsyncResult result) {
            bool retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndEditTemplate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditTemplateCompleted(object state) {
            if ((this.EditTemplateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditTemplateCompleted(this, new EditTemplateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditTemplateAsync(long id, long hospital_id, long doctor_id, string title, string reason, string description) {
            this.EditTemplateAsync(id, hospital_id, doctor_id, title, reason, description, null);
        }
        
        public void EditTemplateAsync(long id, long hospital_id, long doctor_id, string title, string reason, string description, object userState) {
            if ((this.onBeginEditTemplateDelegate == null)) {
                this.onBeginEditTemplateDelegate = new BeginOperationDelegate(this.OnBeginEditTemplate);
            }
            if ((this.onEndEditTemplateDelegate == null)) {
                this.onEndEditTemplateDelegate = new EndOperationDelegate(this.OnEndEditTemplate);
            }
            if ((this.onEditTemplateCompletedDelegate == null)) {
                this.onEditTemplateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditTemplateCompleted);
            }
            base.InvokeAsync(this.onBeginEditTemplateDelegate, new object[] {
                        id,
                        hospital_id,
                        doctor_id,
                        title,
                        reason,
                        description}, this.onEndEditTemplateDelegate, this.onEditTemplateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetRecommendedVisitation(long id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecommendedVisitation(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetRecommendedVisitation(System.IAsyncResult result) {
            return base.Channel.EndGetRecommendedVisitation(result);
        }
        
        private System.IAsyncResult OnBeginGetRecommendedVisitation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long id = ((long)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetRecommendedVisitation(id, callback, asyncState);
        }
        
        private object[] OnEndGetRecommendedVisitation(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetRecommendedVisitation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecommendedVisitationCompleted(object state) {
            if ((this.GetRecommendedVisitationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecommendedVisitationCompleted(this, new GetRecommendedVisitationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecommendedVisitationAsync(long id) {
            this.GetRecommendedVisitationAsync(id, null);
        }
        
        public void GetRecommendedVisitationAsync(long id, object userState) {
            if ((this.onBeginGetRecommendedVisitationDelegate == null)) {
                this.onBeginGetRecommendedVisitationDelegate = new BeginOperationDelegate(this.OnBeginGetRecommendedVisitation);
            }
            if ((this.onEndGetRecommendedVisitationDelegate == null)) {
                this.onEndGetRecommendedVisitationDelegate = new EndOperationDelegate(this.OnEndGetRecommendedVisitation);
            }
            if ((this.onGetRecommendedVisitationCompletedDelegate == null)) {
                this.onGetRecommendedVisitationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecommendedVisitationCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecommendedVisitationDelegate, new object[] {
                        id}, this.onEndGetRecommendedVisitationDelegate, this.onGetRecommendedVisitationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PersonalHealth.WebService.HospitalServiceReference.IHospitalService.BeginGetRecommendedVisitationForPatient(int age, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecommendedVisitationForPatient(age, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PersonalHealth.WebService.HospitalServiceReference.IHospitalService.EndGetRecommendedVisitationForPatient(System.IAsyncResult result) {
            return base.Channel.EndGetRecommendedVisitationForPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetRecommendedVisitationForPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int age = ((int)(inValues[0]));
            return ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).BeginGetRecommendedVisitationForPatient(age, callback, asyncState);
        }
        
        private object[] OnEndGetRecommendedVisitationForPatient(System.IAsyncResult result) {
            string retVal = ((PersonalHealth.WebService.HospitalServiceReference.IHospitalService)(this)).EndGetRecommendedVisitationForPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecommendedVisitationForPatientCompleted(object state) {
            if ((this.GetRecommendedVisitationForPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecommendedVisitationForPatientCompleted(this, new GetRecommendedVisitationForPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecommendedVisitationForPatientAsync(int age) {
            this.GetRecommendedVisitationForPatientAsync(age, null);
        }
        
        public void GetRecommendedVisitationForPatientAsync(int age, object userState) {
            if ((this.onBeginGetRecommendedVisitationForPatientDelegate == null)) {
                this.onBeginGetRecommendedVisitationForPatientDelegate = new BeginOperationDelegate(this.OnBeginGetRecommendedVisitationForPatient);
            }
            if ((this.onEndGetRecommendedVisitationForPatientDelegate == null)) {
                this.onEndGetRecommendedVisitationForPatientDelegate = new EndOperationDelegate(this.OnEndGetRecommendedVisitationForPatient);
            }
            if ((this.onGetRecommendedVisitationForPatientCompletedDelegate == null)) {
                this.onGetRecommendedVisitationForPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecommendedVisitationForPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecommendedVisitationForPatientDelegate, new object[] {
                        age}, this.onEndGetRecommendedVisitationForPatientDelegate, this.onGetRecommendedVisitationForPatientCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PersonalHealth.WebService.HospitalServiceReference.IHospitalService CreateChannel() {
            return new HospitalServiceClientChannel(this);
        }
        
        private class HospitalServiceClientChannel : ChannelBase<PersonalHealth.WebService.HospitalServiceReference.IHospitalService>, PersonalHealth.WebService.HospitalServiceReference.IHospitalService {
            
            public HospitalServiceClientChannel(System.ServiceModel.ClientBase<PersonalHealth.WebService.HospitalServiceReference.IHospitalService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetPatient(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetPatient", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetPatient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPatientByUsernameAndPassword(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("GetPatientByUsernameAndPassword", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetPatientByUsernameAndPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetPatientByUsernameAndPassword", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPatientByEGNAndPassword(string egn, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = egn;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("GetPatientByEGNAndPassword", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetPatientByEGNAndPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetPatientByEGNAndPassword", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddNewPatient(string username, string password, string first_name, string second_name, string last_name, string egn, string gender, int age, string birth_date, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = username;
                _args[1] = password;
                _args[2] = first_name;
                _args[3] = second_name;
                _args[4] = last_name;
                _args[5] = egn;
                _args[6] = gender;
                _args[7] = age;
                _args[8] = birth_date;
                System.IAsyncResult _result = base.BeginInvoke("AddNewPatient", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddNewPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddNewPatient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHospital(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetHospital", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetHospital(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetHospital", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllHospitals(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllHospitals", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetAllHospitals(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetAllHospitals", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDoctor(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetDoctor", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDoctor(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDoctor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDoctorsByHospitalId(long hospital_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = hospital_id;
                System.IAsyncResult _result = base.BeginInvoke("GetDoctorsByHospitalId", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDoctorsByHospitalId(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDoctorsByHospitalId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllDoctors(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllDoctors", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetAllDoctors(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetAllDoctors", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPatientAllergies(long patient_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = patient_id;
                System.IAsyncResult _result = base.BeginInvoke("GetPatientAllergies", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetPatientAllergies(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetPatientAllergies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllAllergies(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllAllergies", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetAllAllergies(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetAllAllergies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHospitalRecord(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetHospitalRecord", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetHospitalRecord(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetHospitalRecord", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHospitalRecordByPatientID(long patient_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = patient_id;
                System.IAsyncResult _result = base.BeginInvoke("GetHospitalRecordByPatientID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetHospitalRecordByPatientID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetHospitalRecordByPatientID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddNewHospitalRecord(long patient_id, long hospital_id, long doctor_id, string reason, string diagnose, string date, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = patient_id;
                _args[1] = hospital_id;
                _args[2] = doctor_id;
                _args[3] = reason;
                _args[4] = diagnose;
                _args[5] = date;
                _args[6] = description;
                System.IAsyncResult _result = base.BeginInvoke("AddNewHospitalRecord", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddNewHospitalRecord(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddNewHospitalRecord", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVisitation(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetVisitation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetVisitation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetVisitation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVisitationByPatientID(long patient_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = patient_id;
                System.IAsyncResult _result = base.BeginInvoke("GetVisitationByPatientID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetVisitationByPatientID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetVisitationByPatientID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMakeVisitationHistory(long id, string diagnose, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = diagnose;
                System.IAsyncResult _result = base.BeginInvoke("MakeVisitationHistory", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndMakeVisitationHistory(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("MakeVisitationHistory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddNewVisitation(long patient_id, long hospital_id, long doctor_id, string date, string reason, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = patient_id;
                _args[1] = hospital_id;
                _args[2] = doctor_id;
                _args[3] = date;
                _args[4] = reason;
                _args[5] = description;
                System.IAsyncResult _result = base.BeginInvoke("AddNewVisitation", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddNewVisitation(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddNewVisitation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditVisitation(long id, long hospital_id, long doctor_id, string date, string reason, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = id;
                _args[1] = hospital_id;
                _args[2] = doctor_id;
                _args[3] = date;
                _args[4] = reason;
                _args[5] = description;
                System.IAsyncResult _result = base.BeginInvoke("EditVisitation", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditVisitation(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditVisitation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRatingHospital(long patient_id, long hospital_id, int rating, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = patient_id;
                _args[1] = hospital_id;
                _args[2] = rating;
                System.IAsyncResult _result = base.BeginInvoke("RatingHospital", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRatingHospital(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RatingHospital", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRatingDoctor(long patient_id, long doctor_id, int rating, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = patient_id;
                _args[1] = doctor_id;
                _args[2] = rating;
                System.IAsyncResult _result = base.BeginInvoke("RatingDoctor", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRatingDoctor(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RatingDoctor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTemplate(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetTemplate", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetTemplate(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetTemplate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllPatientTemplates(long patient_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = patient_id;
                System.IAsyncResult _result = base.BeginInvoke("GetAllPatientTemplates", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetAllPatientTemplates(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetAllPatientTemplates", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddTemplate(long patient_id, long hospital_id, long doctor_id, string title, string reason, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = patient_id;
                _args[1] = hospital_id;
                _args[2] = doctor_id;
                _args[3] = title;
                _args[4] = reason;
                _args[5] = description;
                System.IAsyncResult _result = base.BeginInvoke("AddTemplate", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddTemplate(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddTemplate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditTemplate(long id, long hospital_id, long doctor_id, string title, string reason, string description, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = id;
                _args[1] = hospital_id;
                _args[2] = doctor_id;
                _args[3] = title;
                _args[4] = reason;
                _args[5] = description;
                System.IAsyncResult _result = base.BeginInvoke("EditTemplate", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditTemplate(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditTemplate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRecommendedVisitation(long id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetRecommendedVisitation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetRecommendedVisitation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetRecommendedVisitation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRecommendedVisitationForPatient(int age, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = age;
                System.IAsyncResult _result = base.BeginInvoke("GetRecommendedVisitationForPatient", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetRecommendedVisitationForPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetRecommendedVisitationForPatient", _args, result)));
                return _result;
            }
        }
    }
}
